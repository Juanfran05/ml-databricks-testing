name: Monitoring Workflow


on:
  schedule:
    - cron: "0 8 * * *"


jobs:
  monitor_metrics:
    runs-on: ubuntu-latest
    environment:
      name: staging
    env:
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STAGING_TOKEN }}
      DATABRICKS_CLUSTER_ID: ${{ secrets.DATABRICKS_CLUSTER_ID }}
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_WORKSPACE }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: setup python
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"

    - name: pip install
      run: |
        python -m pip install --upgrade pip setuptools wheel

    - name: install-databricks-cli
      uses: microsoft/install-databricks-cli@v1.0.0

    - name: run monitoring job
      id: run_monitoring_job
      run: |
        databricks jobs run-now --job-id ${{ secrets.MONITORING_JOB_ID }}
        echo "$(python $GITHUB_WORKSPACE/jobs/job_waiter.py ${{ secrets.MONITORING_JOB_ID }})" >> GITHUB_OUTPUT

    - name: run training pipeline
      if: ${{ steps.run_monitoring_job.outputs.state == 'FAILED' }}
      run: databricks jobs run-now --job-id ${{ secrets.JOB_ID_ACTIVE_PROD_JOB }}

  monitor_data:
    runs-on: ubuntu-latest
    environment:
      name: staging
    env:
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STAGING_TOKEN }}
      DATABRICKS_CLUSTER_ID: ${{ secrets.DATABRICKS_CLUSTER_ID }}
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_WORKSPACE }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: setup python
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"

    - name: pip install
      run: |
        python -m pip install --upgrade pip setuptools wheel

    - name: install-databricks-cli
      uses: microsoft/install-databricks-cli@v1.0.0

    - name: run monitoring job
      id: run_monitoring_job
      run: |
        databricks jobs run-now --job-id ${{ secrets.MONITORING_DATA_JOB_ID }}
        echo "$(python $GITHUB_WORKSPACE/jobs/job_waiter.py ${{ secrets.MONITORING_DATA_JOB_ID }})" >> GITHUB_OUTPUT

    - name: run training pipeline
      if: ${{ steps.run_monitoring_job.outputs.state == 'FAILED' }}
      run: databricks jobs run-now --job-id ${{ secrets.JOB_ID_ACTIVE_PROD_JOB }}
